
git hub
######################################################################
#Setup
ip r add 172.16.22.0/24 ....
ssh firewall
## ON FIREWALL box
cat /proc/sys/net/ipv4/ip_forward
### 1 = on 0 = off
## Stop firewalld to clear up firewall rules (Set up blank slate)
systemctl stop firewalld

######################################################################
# Allow TELNET to your firewall from your AP.
iptables -t filter -A INPUT -p tcp --dport 23 -s 10.3.110.0 -d 192.168.22.22 -j ACCEPT

# Allow the instructor AP @10.3.115.100 to SSH to the firewall.
iptables -t filter -A INPUT -p tcp --dport 22 -s 10.3.115.100 -d 192.168.22.22 -j ACCEPT

# Allow SSH to your firewall and to your protected host from your AP.
## AP -> SSH -> firewall
iptables -t filter -A INPUT -p tcp --dport 22 -s 10.3.110.100 -d 192.168.22.22 -j ACCEPT
## AP -> SSH -> protected host
iptables -t filter -A FORWARD -p tcp --dport 22 -s 10.3.110.100 -d 172.16.22.22 -j ACCEPT
iptables -t filter -A FORWARD -p tcp --dport 22 -d 10.3.110.100 -s 172.16.22.22 -j ACCEPT

# TFPT to firewall AND protected host from AP
# TFTP only transferes data over UDP
## AP -> TFTP -> firewall
iptables -t filter -A INPUT -p udp --dport 69 -s 10.3.110.100 -d 192.168.22.22 -j ACCEPT
## AP -> TFTP -> protected host
iptables -t filter -A FORWARD -p udp --dport 69 -s 10.3.110.100 -d 172.16.22.22 -j ACCEPT
iptables -t filter -A FORWARD -p udp --sport 69 -d 10.3.110.100 -s 172.16.22.22 -j ACCEPT

# Use the filter table to create a record of all SSH, TELNET and TFTP # connections to and through your firewall by capturing the initial packet of each session.
iptables -t filter -I INPUT 1 -p udp --dport 69 -m state --state NEW -j LOG --log-prefix "IP4TABLES[INPUT:NEW_TFTP]: "
iptables -t filter -I INPUT 1 -p tcp --dport 23 -m state --state NEW -j LOG --log-prefix "IP4TABLES[INPUT:NEW_TELNET]: "
iptables -t filter -I INPUT 1 -p tcp --dport 22 -m state --state NEW -j LOG --log-prefix "IP4TABLES[INPUT:NEW_SSH]: "

iptables -t filter -I FORWARD 1 -p udp --dport 69 -m state --state NEW -j LOG --log-prefix "IP4TABLES[FORWARD:NEW_TFTP]: "
iptables -t filter -I FORWARD 1 -p tcp --dport 23 -m state --state NEW -j LOG --log-prefix "IP4TABLES[FORWARD:NEW_TELNET]: "
iptables -t filter -I FORWARD 1 -p tcp --dport 22 -m state --state NEW -j LOG --log-prefix "IP4TABLES[FORWARD:NEW_SSH]: "

# Take action to direct web requests arriving at the firewall to the protected
# host @172.17.5.10. ( DNAT PROBLEM )
iptables -t nat -A PREROUTING -p tcp --dport 80 -d 192.168.22.22 -j DNAT --to-destination 172.17.5.10
iptables -t filter -A FORWARD -p tcp --dport 80 -d 172.17.5.10 -j ACCEPT
iptables -t filter -A FORWARD -p tcp --sport 80 -s 172.17.5.10 -j ACCEPT

# Ensure you consider traffic to/from the loopback interface(127.0.0.1).
iptables -t filter -A INPUT -i lo -j ACCEPT

# LOG traffic that does not match any input or forward chain rule.
iptables -t filter -A INPUT -j LOG --log-prefix "IP4TABLES[INPUT:DEFAULT_DROP]: "
iptables -t filter -A FORWARD -j LOG --log-prefix "IP4TABLES[FORWARD:DEFAULT_DROP]: "

# Use a log prefix to identify which chain applies the default drop policy to a
# packet



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Reorganize the rules so that they go in the chains in the correct order. Logging right before the relevant rules and then most specific rules to least specific.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

iptables -t filter -A INPUT -p udp --dport 69 -m state --state NEW -j LOG --log-prefix "IP4TABLES[INPUT:NEW_TFTP]: "
iptables -t filter -A INPUT -p udp --dport 69 -s 10.3.110.100 -d 192.168.22.22 -j ACCEPT
iptables -t filter -A INPUT -p tcp --dport 23 -m state --state NEW -j LOG --log-prefix "IP4TABLES[INPUT:NEW_TELNET]: "
iptables -t filter -A INPUT -p tcp --dport 23 -s 10.3.110.0 -d 192.168.22.22 -j ACCEPT
iptables -t filter -A INPUT -p tcp --dport 22 -m state --state NEW -j LOG --log-prefix "IP4TABLES[INPUT:NEW_SSH]: "
iptables -t filter -A INPUT -p tcp --dport 22 -s 10.3.115.100 -d 192.168.22.22 -j ACCEPT
iptables -t filter -A INPUT -p tcp --dport 22 -s 10.3.110.100 -d 192.168.22.22 -j ACCEPT
iptables -t filter -A INPUT -i lo -j ACCEPT
iptables -t filter -A INPUT -j LOG --log-prefix "IP4TABLES[INPUT:DEFAULT_DROP]: "


iptables -t filter -A FORWARD -p tcp --dport 22 -m state --state NEW -j LOG --log-prefix "IP4TABLES[FORWARD:NEW_SSH]: "
iptables -t filter -A FORWARD -p tcp --dport 22 -d 10.3.110.100 -s 172.16.22.22 -j ACCEPT
iptables -t filter -A FORWARD -p tcp --dport 22 -s 10.3.110.100 -d 172.16.22.22 -j ACCEPT
iptables -t filter -A FORWARD -p tcp --dport 23 -m state --state NEW -j LOG --log-prefix "IP4TABLES[FORWARD:NEW_TELNET]: " -m comment --comment "Shut up and Color Rule"
iptables -t filter -A FORWARD -p udp --dport 69 -m state --state NEW -j LOG --log-prefix "IP4TABLES[FORWARD:NEW_TFTP]: "
iptables -t filter -A FORWARD -p udp --dport 69 -s 10.3.110.100 -d 172.16.22.22 -j ACCEPT
iptables -t filter -A FORWARD -p udp --sport 69 -d 10.3.110.100 -s 172.16.22.22 -j ACCEPT
iptables -t filter -A FORWARD -p tcp --dport 80 -d 172.17.5.10 -j ACCEPT
iptables -t filter -A FORWARD -p tcp --sport 80 -s 172.17.5.10 -j ACCEPT
iptables -t filter -A FORWARD -j LOG --log-prefix "IP4TABLES[FORWARD:DEFAULT_DROP]: "

iptables -t nat -A PREROUTING -p tcp --dport 80 -d 192.168.22.22 -j DNAT --to-dest 172.17.5.10

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# AP host:
	# eth1.110: 10.3.110.100
# Firewall host: 
	# eth0: 192.168.22.22
	# eth1: 172.16.22.1
# Protected host: 
	# eth0: 172.16.22.22
		  # 172.17.5.10/28 (isolated)
# eth1: 172.17.5.5./28 (iso) ?


# Set default policy on INPUT and FORWARD to drop.
iptables -P INPUT DROP
iptables -P FORWARD DROP

# Allow SSH to your firewall from your AP.
iptables -A INPUT -p tcp -s 10.3.110.100 -d 192.168.22.22 --dport 22 -j ACCEPT

# Allow TELNET to your protected host from your AP.
iptables -A FORWARD -p tcp -s 10.3.110.100 -d 172.16.22.22 --dport 23 -j ACCEPT
iptables -A FORWARD -p tcp -d 10.3.110.100 -s 172.16.22.22 --sport 23 -j ACCEPT

# Allow RDESKTOP to your firewall from your AP
iptables -A INPUT -p tcp -s 10.3.110.100 -d 192.168.22.22 --dport 3389 -j ACCEPT

# Create a record of all TELNET connections by capturing the
# initial packet of each TELNET session.
iptables -A INPUT -p tcp --dport 23 -m state --state NEW -j LOG --log-prefix "IP4TABLES[INPUT:NEW_TELNET]: "
iptables -A FORWARD -p tcp --dport 23 -m state --state NEW -j LOG --log-prefix "IP4TABLES[FORWARD:NEW_TELNET]: "

# Use Iptables translation and routing rules to enable your
# protected host to telnet to your student vyos router at
# 10.3.10x.240 using the source address of 172.17.5.10.
# Can test using 'telnet -b 172.17.5.10 10.3.110.240'
iptables -t nat -A POSTROUTING -p tcp --dport 23 -s 172.17.5.10 -d 10.3.110.240 -j SNAT --to-source 192.168.22.22 
iptables -A FORWARD -p tcp --dport 23 -s 172.17.5.10 -d 10.3.110.240 -j ACCEPT
iptables -A FORWARD -p tcp --sport 23 -d 172.17.5.10 -s 10.3.110.240 -j ACCEPT

# Create rule/s for traffic to/from the loopback interface
# (127.0.0.1)
iptables -A INPUT -i lo -j ACCEPT
iptables -A OUTPUT -o lo -j ACCEPT

# LOG traffic that identifies the first packet of translated
# traffic. Use a log prefix to identify that translated traffic.
iptables -A FORWARD -p tcp --dport 23 -s 172.17.5.10 -d 10.3.110.240 -conntrack --ctstate NEW -j LOG --log-prefix "IP4TABLES[NAT_POSTROUTING:NEW_FORWARD]: "


iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -p tcp --dport 23 -m conntrack --ctstate NEW-j LOG --log-prefix "IP4TABLES[INPUT:NEW_TELNET]: " -m comment --comment "Shut up and Color"
iptables -A INPUT -p tcp -s 10.3.110.100 -d 192.168.22.22 --dport 22 -j ACCEPT
iptables -A INPUT -p tcp -s 10.3.110.100 -d 192.168.22.22 --dport 3389 -j ACCEPT

iptables -A FORWARD -p tcp --dport 23 -m conntrack --ctstate NEW -j LOG --log-prefix "IP4TABLES[FORWARD:NEW_TELNET]: "
iptables -A FORWARD -p tcp --dport 23 -s 10.3.110.100 -d 172.16.22.22 -j ACCEPT -m comment --comment "Telnet to Protected"
iptables -A FORWARD -p tcp --sport 23 -s 172.16.22.22 -d 10.3.110.100 -j ACCEPT -m comment --comment "Telnet from Protected"

iptables -A FORWARD -p tcp --dport 23 -s 172.17.5.10 -d 10.3.110.240 -m conntrack --ctstate NEW -j LOG --log-prefix "IP4TABLES[NAT_POSTROUTING:NEW_FORWARD]: "
iptables -A FORWARD -p tcp --dport 23 -s 172.17.5.10 -d 10.3.110.240 -j ACCEPT -m comment --comment "Telnet to VYOS router"
iptables -A FORWARD -p tcp --sport 23 -s 10.3.110.240 -d 172.17.5.10 -j ACCEPT -m comment --comment "Telnet from VYOS"

iptables -A OUTPUT -o lo -j ACCEPT

iptables -t nat -A POSTROUTING -p tcp --dport 23 -s 172.17.5.10 -d 10.3.110.240 -j SNAT --to-source 192.168.22.22 

iptables -t filter -P INPUT DROP
iptables -t filter -P FORWARD DROP

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# Firewall host: eth0: 192.168.22.22
	# eth1: 172.16.22.1
	# eth1: 172.17.5.5./28 (iso)
# Protected host: eth0: 172.16.22.22
	# eth0: 172.17.5.10/28 (iso)

# Set default policy on INPUT and FORWARD chains to drop.
iptables -P INPUT DROP
iptables -P FORWARD DROP

#DONE
# nc -u 172.16.22.22 9900
# nc -unvlp 9900
# nc 172.16.22.22 9900
# nc -nvlp 9900
# The protected host provides access to a database app that supports connections
# to udp and tcp port 9900 from clients in your student network.
iptables -A FORWARD -p tcp -s 10.3.110.0/24 -d 172.16.22.22 --dport 9900 -j ACCEPT -m comment --comment "TCP Database Connection"
iptables -A FORWARD -p udp -s 10.3.110.0/24 -d 172.16.22.22 --dport 9900 -j ACCEPT -m comment --comment "UDP Database Connection"

#DONE
# nc -u 172.16.22.1 123
# nc -u 172.17.5.5 123
# The Firewall acts as NTP server for the protected host: Allow only the
# protected host to connect to this service from both the routed and non-routed
# interfaces.
iptables -A INPUT -p udp -s 172.16.22.22 -d 172.16.22.1 --dport 123 -j ACCEPT -m comment --comment "NTP Access (Route)"
iptables -A INPUT -p udp -s 172.17.5.10 -d 172.17.5.5 --dport 123 -j ACCEPT -m comment --comment "NTP Access (Isolated)"

#DONE
# curl 192.168.22.22:[80,443,8000,8008,8080,8443]
# python3 -m http.server 8080
# Web requests to firewall will be forwarded to the protected host on its
# isolated address on port 8080 (DNAT)
iptables -t nat -A PREROUTING -p tcp -m multiport --dports 80,443,8000,8008,8080,8443 -d 192.168.22.22 -j DNAT --to-destination 172.17.5.10:8080 -m comment --comment "NAT to protected database"

iptables -A FORWARD -p tcp -d 172.17.5.10 --dport 8080 -j ACCEPT -m comment --comment "Inbound NAT web requests"
iptables -A FORWARD -p tcp -s 172.17.5.10 --sport 8080 -j ACCEPT -m comment --comment "Outbound NATed web requests"

#DONE
# Firewall can be administered via telnet and ssh from your attack platform.
iptables -A INPUT -p tcp -s 10.3.110.100 -d 192.168.22.22 --dport 22:23 -j ACCEPT -m comment --comment "SSH/TELNET access to firewall"
# Testing Rules
# ssh 192.168.22.22
# iptables -A INPUT -p tcp -s 10.3.110.100 -d 192.168.22.22 --dport 22 -j ACCEPT -m comment --comment "SSH access to firewall"
# telnet 192.168.22.22
# iptables -A INPUT -p tcp -s 10.3.110.100 -d 192.168.22.22 --dport 23 -j ACCEPT -m comment -- comment "TELNET access to firewall"

# CentOS Firewall users may NOT SSH or telnet to any host. (Both Interfaces)
iptables -A -p tcp -s 192.168.22.22 --dport 22:23 -j DROP
iptables -A -p tcp -s 172.16.22.1 --dport 22:23 -j DROP
iptables -A -p tcp -s 172.17.5.5 --dport 22:23 -j DROP

# Protected host (isolated net) can be managed via ssh and telnet from your
# attack platform.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


#DONE
# Default drop policy on all chains (filter table) except output.
iptables -P INPUT DROP
iptables -P FORWARD DROP

#DONE
# Ssh connections to firewall on port 2200 will be forwarded to the isolated host at 172.17.5.10 on the standard ssh port (DNAT)
iptables -t nat -A PREROUTING -p tcp --dport 2200 -j DNAT --to-destination 172.17.5.10
iptables -A FORWARD -p tcp -d 172.17.5.10 --dport 2200 -j ACCEPT -m comment --comment "SSH 2200 forwarding"
iptables -A FORWARD -p tcp -s 172.17.5.10 --sport 2200 -j ACCEPT -m comment --comment "SSH 2200 forwarding"

#DONE
# Firewall has a notional web management interface on port 8080. Allow access
# only from the internal routed network.
iptables -A INPUT -p tcp -s 172.16.22.0/24 -d 172.16.22.1 --dport 8080 -j ACCEPT -m comment --comment "Firewall Web Management"

#DONE
# Firewall can be administered via ssh from your attack platform.
iptables -A INPUT -p tcp -s 10.3.110.100 -d 192.168.22.22 --dport 22 -j ACCEPT -m comment --comment "AP SSH Administration"

#DONE
# Firewall users/admins may NOT telnet to your pod router at 10.3.xxx.240.Ensure
# they receive no return message from the firewall denying their connection.
iptables -A OUTPUT -p tcp -s 192.168.22.22 -d 10.3.100.240 --dport 23 -j DROP
iptables -A OUTPUT -p tcp -s 172.16.22.1 -d 10.3.100.240 --dport 23 -j DROP
iptables -A OUTPUT -p tcp -s 172.17.5.5 -d 10.3.100.240 --dport 23 -j DROP

#DONE
# Routed internal host can be managed via ssh and telnet from your attack platform.
iptables -A FORWARD -p tcp -s 10.3.110.100 -d 172.16.22.22 --dport 22:23 -j ACCEPT
iptables -A FORWARD -p tcp -d 10.3.110.100 -s 172.16.22.22 --sport 22:23 -j ACCEPT

#DONE
# Routed internal host provides access to a database app that supports connections to tcp port 5500. Database clients are random.
iptables -A FORWARD -p tcp -d 172.16.22.22 --dport 5500 -j ACCEPT -m comment --comment "Databse Access"
iptables -A FORWARD -p tcp -s 172.16.22.22 --sport 5500 -j ACCEPT -m comment --comment "Databse Access"

#DONE
# The firewall uses 10.3.99.205 for DNS queries
iptables -A INPUT -p tcp -s 10.3.99.205 --sport 53 -j ACCEPT
iptables -A INPUT -p udp -s 10.3.99.205 --sport 53 -j ACCEPT

iptables -A INPUT -p tcp -s 10.3.99.205 --sport 53 -j ACCEPT -m comment --comment "DNS"
iptables -A INPUT -p udp -s 10.3.99.205 --sport 53 -j ACCEPT -m comment --comment "DNS"
iptables -A INPUT -p tcp -s 10.3.110.100 -d 192.168.22.22 --dport 22 -j ACCEPT -m comment --comment "AP SSH Administration"
iptables -A INPUT -p tcp -s 172.16.22.0/24 -d 172.16.22.1 --dport 8080 -j ACCEPT -m comment --comment "Firewall Web Management"

iptables -A OUTPUT -p tcp -s 192.168.22.22 -d 10.3.100.240 --dport 23 -j DROP
iptables -A OUTPUT -p tcp -s 172.16.22.1 -d 10.3.100.240 --dport 23 -j DROP
iptables -A OUTPUT -p tcp -s 172.17.5.5 -d 10.3.100.240 --dport 23 -j DROP

iptables -A FORWARD -p tcp -s 10.3.110.100 -d 172.16.22.22 --dport 22:23 -j ACCEPT -m comment --comment "AP SSH/TELNET Protected Host"
iptables -A FORWARD -p tcp -d 10.3.110.100 -s 172.16.22.22 --sport 22:23 -j ACCEPT -m comment --comment "AP SSH/TELNET Protected Host"
iptables -A FORWARD -p tcp -d 172.16.22.22 --dport 5500 -j ACCEPT -m comment --comment "Databse Access"
iptables -A FORWARD -p tcp -s 172.16.22.22 --sport 5500 -j ACCEPT -m comment --comment "Databse Access"
iptables -A FORWARD -p tcp -d 172.17.5.10 --dport 2200 -j ACCEPT -m comment --comment "SSH 2200 forwarding"
iptables -A FORWARD -p tcp -s 172.17.5.10 --sport 2200 -j ACCEPT -m comment --comment "SSH 2200 forwarding"

iptables -t nat -A PREROUTING -p tcp --dport 2200 -j DNAT --to-destination 172.17.5.10 -m comment --comment "Port 2200 DNATing"

iptables -P INPUT DROP
iptables -P FORWARD DROP

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



# Set default policy on INPUT and FORWARD to drop.
iptables -P INPUT DROP
iptables -P FORWARD DROP

# Allow SSH to your firewall and your protected host from your AP and the
# instructor AP.
iptables -A INPUT -p tcp -s 10.3.110.100 -d 192.168.22.22 --dport 22 -j ACCEPT -m comment --comment "AP SSH Admin"
iptables -A INPUT -p tcp -s 10.3.115.100 -d 192.168.22.22 --dport 22 -j ACCEPT -m comment --comment "INST SSH Admin"

iptables -A FORWARD -p tcp -s 10.3.110.100 -d 172.16.22.22 --dport 22 -j ACCEPT -m comment --comment "AP SSH Admin"
iptables -A FORWARD -p tcp -d 10.3.110.100 -s 172.16.22.22 --sport 22 -j ACCEPT -m comment --comment "AP SSH Admin"
iptables -A FORWARD -p tcp -s 10.3.115.100 -d 172.16.22.22 --dport 22 -j ACCEPT -m comment --comment "INST SSH Admin"
iptables -A FORWARD -p tcp -d 10.3.115.100 -s 172.16.22.22 --sport 22 -j ACCEPT -m comment --comment "INST SSH Admin"

# Allow TELNET to your protected host from your AP.
iptables -A FORWARD -p tcp -s 10.3.110.100 -d 172.16.22.22 --dport 23 -j ACCEPT -m comment --comment "AP TELNET Admin"
iptables -A FORWARD -p tcp -d 10.3.110.100 -s 172.16.22.22 --sport 23 -j ACCEPT -m comment --comment "AP TELNET Admin"

# Disallow telnet connections to your protected host from the host at 10.3.10x.75
iptables -A FORWARD -p tcp -s 10.3.110.75 -d 172.16.22.22 --dport 23 -j DROP

# Allow FTP (assume port 20/21 are the FTP ports) to your firewall from your AP
iptables -A INPUT -p tcp -s 10.3.110.100 -d 192.168.22.22 --dport 20:21 -j ACCEPT -m comment --comment "AP FTP Firewall"

# Use a user-defined chain called “Servlog” to log all TELNET and SSH
# connections to either your firewall or your protected host.
iptables -N Servlog
iptables -A INPUT -p tcp --dport 22:23 -j Servlog
iptables -A FORWARD -p tcp --dport 22:23 -j Servlog

iptables -A Servlog -p tcp --dport 23 -d 192.168.22.22 -m conntrack --ctstate NEW -j LOG --log-prefix "IP4TABLES[SERVLOG:NEW_TELNET]: "
iptables -A Servlog -p tcp --dport 23 -d 172.16.22.22 -m conntrack --ctstate NEW -j LOG --log-prefix "IP4TABLES[SERVLOG:NEW_TELNET]: "
iptables -A Servlog -p tcp --dport 22 -d 172.16.22.22 -m conntrack --ctstate NEW -j LOG --log-prefix "IP4TABLES[SERVLOG:NEW_SSH]: "
iptables -A Servlog -p tcp --dport 22 -d 192.168.22.22 -m conntrack --ctstate NEW -j LOG --log-prefix "IP4TABLES[SERVLOG:NEW_SSH]: "

# Create rule/s to account for traffic to/from the loopback interface.(127.0.0.1)
iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -o lo -j ACCEPT

# Start an HTTP Server on your firewall listening on port 8080. Use the
# appropriate target to redirect normal web requests arriving at the firewall to
# the server listening on port 8080.
iptables -t nat -A PREROUTING -p tcp -m multiport --dports 80,443,8000,8008,8080,8443 -d 192.168.22.22 -j DNAT --to-destination 172.16.22.22:8080 -m comment --comment "NAT to protected database"
iptables -A FORWARD -p tcp -d 172.16.22.22 --dport 8080 -j ACCEPT -m comment --comment "Inbound NAT web requests"
iptables -A FORWARD -p tcp -s 172.16.22.22 --sport 8080 -j ACCEPT -m comment --comment "Outbound NATed web requests"

iptables -N Servlog
iptables -A Servlog -p tcp --dport 23 -d 192.168.22.22 -j LOG --log-prefix "IP4TABLES[SERVLOG:NEW_TELNET]: "
iptables -A Servlog -p tcp --dport 23 -d 172.16.22.22 -j LOG --log-prefix "IP4TABLES[SERVLOG:NEW_TELNET]: "
iptables -A Servlog -p tcp --dport 22 -d 172.16.22.22 -j LOG --log-prefix "IP4TABLES[SERVLOG:NEW_SSH]: "
iptables -A Servlog -p tcp --dport 22 -d 192.168.22.22 -j LOG --log-prefix "IP4TABLES[SERVLOG:NEW_SSH]: "

iptables -A INPUT -i lo -j ACCEPT
iptables -A INPUT -o lo -j ACCEPT
iptables -A INPUT -p tcp --dport 22:23 -m conntrack --ctstate NEW -j Servlog
iptables -A INPUT -p tcp -s 10.3.110.100 -d 192.168.22.22 --dport 22 -j ACCEPT -m comment --comment "AP SSH Firewall"
iptables -A INPUT -p tcp -s 10.3.115.100 -d 192.168.22.22 --dport 22 -j ACCEPT -m comment --comment "INST SSH Firewall"
iptables -A INPUT -p tcp -s 10.3.110.100 -d 192.168.22.22 --dport 20:21 -j ACCEPT -m comment --comment "AP FTP Firewall"
iptables -A INPUT -p tcp -m multiport --dports 80,443,8000,8008,8080,8443 -d 192.168.22.22 -j REDIRECT --to-port 8080 -m comment --comment "Redirect to protected database"

iptables -A FORWARD -p tcp -s 10.3.110.75 -d 172.16.22.22 --dport 23 -j DROP
iptables -A FORWARD -p tcp --dport 22:23 -m conntrack --ctstate NEW -j Servlog
iptables -A FORWARD -p tcp -s 10.3.110.100 -d 172.16.22.22 --dport 22 -j ACCEPT -m comment --comment "AP SSH ProHost"
iptables -A FORWARD -p tcp -d 10.3.110.100 -s 172.16.22.22 --sport 22 -j ACCEPT -m comment --comment "AP SSH ProHost"
iptables -A FORWARD -p tcp -s 10.3.115.100 -d 172.16.22.22 --dport 22 -j ACCEPT -m comment --comment "INST SSH ProHost"
iptables -A FORWARD -p tcp -d 10.3.115.100 -s 172.16.22.22 --sport 22 -j ACCEPT -m comment --comment "INST SSH ProHost"
iptables -A FORWARD -p tcp -s 10.3.110.100 -d 172.16.22.22 --dport 23 -j ACCEPT -m comment --comment "AP TELNET ProHost"
iptables -A FORWARD -p tcp -d 10.3.110.100 -s 172.16.22.22 --sport 23 -j ACCEPT -m comment --comment "AP TELNET ProHost"

iptables -P FORWARD DROP
iptables -P INPUT DROP








%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

1. Port/protocol – 9999/udp
2. Network offered to VPN Clients:  10.50.110.0/24
3. Configure logging with a verbosity of 6
4. log file needs to write to /var/log/openvpn/openvpn.log
5. Ensure openvpn will start after a reboot 
6. Configure IP forwarding to survive a reboot
7. Iptables on openvpn server to allow for openvpn ports and SNAT (INPUT/FORWARD/POSTROUTING)
7.1 Set appropriate policies set to drop
7.2 iptables must survive a reboot
7.3 Supporting IPTables ssh/openvpn rules for 10.3.110.220 (Instructor AP/gradeserver)

8. Generate Certificate Authority
9. Generate Server Keys
10. Generate client keys for 
	tuneup
	instructor-10
11. Create unified .ovpn file 
	tuneup-10 
	instructor-10

	Using your AP
	Make no configuration changes to your AP
12. Copy tuneup10.ovpn file from OpenVPN server to AP’s Desktop

13. Place the Instructor config in the following path (NFS Share)
	/mnt/nfs/FOUNDATIONS/OPENVPN/scen6/s<stud#>

14. Execute openvpn with the outstation<student#>.ovpn configuration
15. Add route to 172.16.24.100 via the established tunnel

16. Browse, curl, or wget the student-GETME.txt file (read the file and follow the instructions)

17. Troubleshoot/observe tunnel connections by tailing logs and using tcpdump on the OpenVPN server on the eth1 and tun0 interfaces
18. Use a web browser and browse to 172.16.24.100 on port 8000




Setup
Log onto the OpenVPN server

ssh <user>@<IP_Address>
Upgrade to root

sudo su
Set up forwarding
sed -i 's/#net.ipv4.ip_forward=[01]/net.ipv4.ip_forward=1/' /etc/sysctl.conf
sysctl -p

Set up CA
cd -- "$(dirname "$(find / -type f -name easyrsa 2>/dev/null | head -n 1)")" && ./easyrsa init-pki; ./easyrsa build-ca

./easyrsa build-server-full server1 nopass
# Rerun this command to make more clients
./easyrsa build-client-full client nopass
# For instrutor 
./easyrsa build-client-full instrutor10 nopass

./easyrsa gen-dh; openvpn --genkey --secret ./pki/ta.key

Set up Server
cp -pR /usr/share/easy-rsa/pki/{issued,private,ca.crt,dh.pem,ta.key} /etc/openvpn/server
cd /etc/openvpn/server


cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/server
gunzip server.conf.gz
cp -rp server.conf ../ubuntu1.conf


cd ..
vim /etc/openvpn/ubuntu1.conf


dev tun
ifconfig-pool-persist /var/log/openvpn/ipp.txt
keepalive 10 120
cipher AES-256-CBC
persist-key
persist-tun
explicit-exit-notify 1  # Take this options out if using tcp

local 192.168.30.25 # Change if necessary
port 7070  # Change Port
proto udp  # Change if necessary
server 10.50.110.0 255.255.255.0  # Change if necessary
push "route 172.16.24.0 255.255.255.0"  # Change to match desired network

ca /etc/openvpn/server/ca.crt
dh /etc/openvpn/server/dh.pem
tls-auth /etc/openvpn/server/ta.key 0 # This file is secret
cert /etc/openvpn/server/issued/server1.crt
key /etc/openvpn/server/private/server1.key  # This file should be kept secret

user nobody
group nogroup

comp-lzo  # Compression
status /var/log/openvpn/openvpn-status.log
log /var/log/openvpn/openvpn.log
verb 6


tail -f /var/log/syslog | grep openvpn


Non-persistent
systemctl start openvpn@ubuntu1 && systemctl status openvpn@ubuntu1

Persistent
systemctl enable openvpn@ubuntu1 && systemctl start openvpn@ubuntu1 && systemctl status openvpn@ubuntu1

Check Actions

ss -ptuna | grep -i openvpn


Firewall Rules (Change as necessary)
SSH Access Rules

iptables -A INPUT -p tcp --dport 22 -s 10.3.110.220 -j ACCEPT
iptables -A INPUT -p tcp --dport 22 -s 10.3.110.100 -j ACCEPT
VPN Rules (Change port,protocol?, and SNAT source network)

iptables -A INPUT -p udp --dport 1194 -s 10.3.110.220 -j ACCEPT
iptables -A INPUT -p udp --dport 1194 -s 10.3.110.100 -j ACCEPT
iptables -t nat -A POSTROUTING -s 10.40.110.0/24 -o eth1 -j SNAT --to-source  192.168.24.50

iptables -A INPUT -i tun+ -j ACCEPT
iptables -A FORWARD -i tun+ -o eth1 -j ACCEPT
iptables -A FORWARD -i eth1 -o tun+ -j ACCEPT
Run to test rules when setting policies

iptables -P INPUT DROP; iptables -P FORWARD DROP; sleep 20; iptables -P INPUT ACCEPT; iptables -P FORWARD ACCEPT


Save rules to file

iptables-save | tee /etc/iptables/rules.v4
Set up Client
vim /etc/openvpn/vpnstudent10.ovpn
client

proto udp
remote 192.168.30.25 9999

dev tun
resolv-retry infinite
nobind
persist-key
persist-tun
user nobody
group nogroup
remote-cert-tls server
key-direction 1
cipher AES-256-CBC
#comp-lzo
verb 3

copy config to instructor file

cp vpnstudent10.ovpn instructor-10.ovpn
Add key inline to configuration
Change 3 names

echo '<ca>' >> vpnstudent10.ovpn
cat /etc/openvpn/server/ca.crt >> vpnstudent10.ovpn
echo '</ca>' >> vpnstudent10.ovpn

Change 4 names

echo '<cert>' >> vpnstudent10.ovpn
cat /etc/openvpn/server/issued/vpnstudent10.crt >> vpnstudent10.ovpn
echo '</cert>' >> vpnstudent10.ovpn

Change 4 names

echo '<key>' >> vpnstudent10.ovpn
cat /etc/openvpn/server/private/vpnstudent10.key >> vpnstudent10.ovpn
echo '</key>' >> vpnstudent10.ovpn

Change 3 names

echo '<tls-auth>' >> vpnstudent10.ovpn
cat /etc/openvpn/server/ta.key >> vpnstudent10.ovpn
echo '</tls-auth>' >> vpnstudent10.ovpn
Add inline keys to instructor file
Change 3 names

echo '<ca>' >> instructor-10.ovpn
cat /etc/openvpn/server/ca.crt >> instructor-10.ovpn
echo '</ca>' >> instructor-10.ovpn

Change 3 names

echo '<tls-auth>' >> instructor-10.ovpn
cat /etc/openvpn/server/ta.key >> instructor-10.ovpn
echo '</tls-auth>' >> instructor-10.ovpn

Change 4 names

echo '<cert>' >> instructor-10.ovpn
cat /etc/openvpn/server/issued/instructor-10.crt >> instructor-10.ovpn
echo '</cert>' >> instructor-10.ovpn

Change 4 names

echo '<key>' >> instructor-10.ovpn
cat /etc/openvpn/server/private/instructor-10.key >> instructor-10.ovpn
echo '</key>' >> instructor-10.ovpn


Connect Client
*ON SERVER (Change path if necessary)

tail -f /var/log/openvpn/openvpn.log
ON CLIENT
Add user/group

groupadd nogroup
Move files to client from server

rm -f /etc/openvpn/*
scp -rp administrator@192.168.30.25:/etc/openvpn/*.ovpn /etc/openvpn/
Connect

cd /etc/openvpn
openvpn --config tuneup.ovpn
Grading Misc

curl http://172.16.24.100:8000/student-GETME.txt -o student-GETME.txt
cp {instructor-10.ovpn,student-GETME.txt} /mnt/nfs/OPENVPN/scen2/s10
Troubleshooting
<Make fix actions>
systemctl stop openvpn@ubuntu1
systemctl start openvpn@ubuntu1
OpenVPN Labs
Lab 1
Configure an OpenVPN server with the following settings:

Interface eth0 – do not change
Interface eth1 – do not change
Port/protocol – 5000/udp
Network offered to VPN Clients: 10.100.<student #>.0/24 (example 10.100.115.0/24)
Configure logging with a verbosity of 6, log file needs to write to /etc/openvpn/
Ensure openvpn will start after a reboot (sysctl)
Configure IP forwarding to survive a reboot
Iptables on openvpn server to allow for openvpn ports and SNAT (INPUT/FORWARD/POSTROUTING); policies set to drop; iptables must survive a reboot
Supporting IPTables ssh/openvpn rules for 10.3.<STUD###>.220 (Instructor AP/gradeserver)
Use semanage as necessary
Generate Certificate Authority
Generate Server Keys
Generate client keys for apclient and instructor-<student#>
Create unified .ovpn file for apclient and instructor-<student#>
Using your AP
Make no configuration changes to your AP
Copy apclient.ovpn file from OpenVPN server to AP’s Desktop
Place the Instructor config in the following path (NFS Share)
/mnt/nfs/FOUNDATIONS/OPENVPN/scen1/s<stud#>
Execute openvpn with the apclient.ovpn configuration
Add route to 172.16.24.100 via the established tunnel
Browse, curl, or wget the student-GETME.txt file (read the file and follow the instructions)
Troubleshoot/observe tunnel connections by tailing logs and using tcpdump on the OpenVPN server on the eth1 and tun0 interfaces
Use a web browser and browse to 172.16.24.100 on port 8000
Server Config Options

local 192.168.30.25
port 5000
proto udp
dev tun
ca /etc/openvpn/server/ca.crt
cert /etc/openvpn/server/issued/server1.crt
key /etc/openvpn/server/private/server1.key  # This file should be kept secret
dh /etc/openvpn/server/dh.pem
server 10.100.110.0 255.255.255.0
ifconfig-pool-persist /var/log/openvpn/ipp.txt
push "route 172.16.24.0 255.255.255.0"
keepalive 10 120
tls-auth /etc/openvpn/server/ta.key 0 # This file is secret
cipher AES-256-CBC
comp-lzo
user nobody
group nogroup
persist-key
persist-tun
status /var/log/openvpn/openvpn-status.log
log-append  /var/log/openvpn/openvpn.log
verb 6
explicit-exit-notify 1


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



IPIP
Check tunnel interfaces

ip link | cut -d" " -f 2
Create a new tunnel

ip tunnel add name <name> mode ipip local <localRealIP> remote <remoteRealIP>
Turn tunnel on

ifconfig <tunName> up
Assign IP to tunnel

ip a add <networkIP> dev <TunName>
Create a route to the network through the tunnel

ip route add <Network> dev <TunName>
NAT Traffic comming from tunnel

iptables -t nat -A POSTROUTING -p tcp -s <FarTunEntrace> -d <TarNet> -j SNAT --to-source <Box IP>
iptables -A INPUT -p tcp -s <FarTunEntrace> -d <TarNet> -j ACCEPT
iptables -A INPUT -p tcp -d <FarTunEntrace> -s 172.16.11.0/24 -j ACCEPT
????????????

iptables -t nat -A POSTROUTING -p tcp -s <FarTunEntrace> -d <TarNet> -j SNAT --to-source <Box IP>
SSH
Local Forward
ssh -fqNL <ingressPort>:<egressIP><egressPort>
Remote Forward
ssh -fqNR <ingressPort>:<egressIP><egressPort>
HTUN
Server Setup
echo 1 > /proc/sys/net/ipv4/ip_forward
cd -- "$(dirname "$(find / -type f -name htun.py 2>/dev/null | head -n 1)")"
HTTP

./htun.py --server [<port>]
TCP

./htun.py --server tcp -p <port>
Client Setup
cd -- "$(dirname "$(find / -type f -name htun 2>/dev/null | head -n 1)")"
HTTP

./htun.py -d --uri http://<IP>:<Port>
TCP

./htun.py -d --uri tcp://<IP>:<Port>
Tunnel Setup
Set Up route through tunnel

ip r <network> dev htun
SSH Exercise 1
Tunneling | SSH Tunneling
#Note #Class Your AP will be the client in our exercises and scenarios. By default, htun creates tunnel interfaces with IP address of 10.13.37.1 on the client and 10.13.37.2 on the server. You’ll need to add a route on your AP/htun client to reach a remote network via the server.

ip route add 172.17.5.0/28 via 10.13.37.2
OR
`ip route add 172.17.5.0/28 dev htun
Set up a tunnel from AP to Kali1 (192.168.11.11) in order to enable an operator to ssh to target Kali2 from your AP. Use local port 2222 to reach the standard ssh port on the target. In the same command, set up a reverse tunnel to transport traffic arriving on port 8080 on Kali1 to a listener on your AP listening on localhost on port 8888.

Use HTUN to setup a HTTP tunnel between your AP and the #Error (Kali3 is Kali1 on map) Kali3 host at 192.168.11.11.

Use port 8088
Use the debug switch (-d)
# One the server box
./htun.py --server -p 8088
# DEBUG:root:Initiate Tunnel Object

# On the client box
./htun.py --uri http://192.168.11.11:8080

Add the proper route to reach host 172.16.11.11

Ping and ssh to 172.16.11.11.
root:asdfgh3

ssh 192.168.11.11
# On 192.168.11.11 Kail
## Check for routing
cat /proc/sys/net/ipv4/ip_forward
## If 0
echo 1 > /proc/sys/net/ipv4/ip_forward
## Local htun.py
find / -name htun.py -execdir cd {};
./htun.py -d --server -p 8080

#On AP
./htun.py --uri http://192.168.11.11:8080
## To reach the network through the tunnel
ip route add 172.16.11.0/24 dev htun
## To reach the routable network through the tunnel (opt)
ip route add 192.168.11.0/24 dev htun
SSH Exercise 2
#Class Exercise 2
Use HTUN to create a TCP tunnel from your AP to KALI1 on port 8888.
Create a route to isolated target network 172.16.11.0/24
ping 172.16.11.11
ssh to 172.16.11.11
What is the source address for tunnel traffic arriving at the host at 172.16.11.11? Was you prediction correct?
ssh 192.168.11.11
# On 192.168.11.11 Kail
## Check for routing
cat /proc/sys/net/ipv4/ip_forward
## If 0
echo 1 > /proc/sys/net/ipv4/ip_forward
## Local htun.py
find / -name htun.py -execdir cd {};
./htun.py -d --server tcp -p 8080

#On AP
./htun.py --uri tcp://192.168.11.11:8080
## To reach the network through the tunnel
ip route add 172.16.11.0/24 dev htun
## To reach the routable network through the tunnel (opt)
ip route add 192.168.11.0/24 dev htun
#Class Exercise 3
Use HTUN to once again setup a HTTP packet tunnel between your AP and the Kali1 host at 192.168.11.11. (Your choice of ports)
# Ssh to Kail 1
ssh kali
# On Kali 1
## Set up http server
./htun.py -d --server -p 8000

# On AP
./htun.py --uri http://192.168.11.11:8000

## In another terminal
ip route add 172.16.11.0/24 dev htun
Then utilize the HTTP tunnel to enable an ssh tunnel from your AP to Kali2 to forward traffic destined to local port 8080 to a webserver listening on Kali2 on port 8000.
ssh -L 8080:172.16.11.11:8000 kali1
Lab 1
This exercise uses your current #Error Foundations team.

Chain SSH tunnels through Kali 1, 2, and 5 in order to reach the SSH, Winbox, and Web services on the Mikrotik router @172.16.18.1. For this exercise, do not use proxy jumps.

# SSH Configs
HOST kali1
    User root
    Hostname 192.168.11.11
    LocalForward 1111 172.16.11.11:22

HOST kali2
    User root
    Hostname 127.0.0.1
    Port 1111
    LocalForward 1112 172.16.13.33:22

HOST kali3
    User root
    Hostname 127.0.0.1
    Port 1112
    DynamicForward 9050



Lab 2
This exercise uses your current #Error Foundations team plus an additional VM host.

Create an IPIP tunnel between your AP and a Kali host at 192.168.22.122/24.
Take the appropriate actions in order to display the webfig interface on
the Mikrotik2 router at 172.16.18.1.
On that same Kali host, create an HTUN HTTP tunnel from your AP in order
to connect to the SSH server on the Mikrotik2 router at 172.16.20.2
# Create an IPIP tunnel between your AP and a Kali host at 192.168.22.122/24. 
# ON AP
ip link add name t2 type ipip local 10.3.110.100 remote 192.168.22.122
ip link set t2 up
ip a add 1.1.1.1 dev t2
ip r add 172.16.18.0/24 via 1.1.1.1
# ON Kali
echo 1 > /proc/sys/net/ipv4/ip_forward
ip link add name t2 type ipip local 192.168.22.122 remote 10.3.110.100
ip link set t2 up
ip a add 1.1.1.2 dev t2


# Take the appropriate actions in order to display the webfig interface on
the Mikrotik2 router at 172.16.18.1.
# On Kali
iptables -t nat -R POSTROUTING 1 -s 1.1.1.1 -d 172.16.18.1 -j SNAT --to-source 172.16.18.11

# On AP
## To test
curl http://172.16.18.1:80
## Use the no proxy option on Firefox to browse to it. 

# On that same Kali host, create an HTUN HTTP tunnel from your AP in order 
to connect to the SSH server on the Mikrotik2 router at 172.16.20.2 
## On Kail
iptables -t nat -R POSTROUTING 1 -s 10.13.37.1 -d 172.16.20.2 -j SNAT --to-source 172.16.18.11
./htun.py -d --server -p 8888	
## On AP
./htun.py --uri http://192.168.22.122:8888
ip r add 172.16.20.0/24 dev htun


ssh -L 2222:172.16.20.2:22 root@10.13.37.2




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


Lab 1
Download the file grepdata.txt from 10.3.99.206, in the COTC-Blocks/Basic-Linux/Grep-Exercises directory.

Using the grep command, perform the following:

Print all lines that contain a phone number with an extension (the letter x or X followed by four digits).
Print all lines that begin with three digits followed by a blank. Your answer must use the {} repetition specifier.
Print all lines that contain a date. Does not have to work for any year prior to 2000.
Print all lines that do not begin with a capital S.
Print all lines that contain the word de as a whole word.
Print all lines that contain CA in either uppercase or lowercase.
Print all lines that do not contain the word Sep. (including the period).
Print all lines that contain an e-mail address, preceded by the line number.
Bonus

Print all lines containing a vowel (a, e, i, o, or u) followed by a single character followed by the same vowel again. (should find eve or adam but not vera)
Lab 2
Download the file nba.Mar.2015.txt from 10.3.99.206, in the COTC-Blocks/Basic-Linux/Grep-Exercises directory.

Using the gawk and sort commands, perform the following:

Sort the file alphabetically by last name, save the output to a file named lastnamefirst.txt
Print all players on the list who are averaging 20 or more points per game (PTS).
Sort numerically by most rebounds (REB) from highest to lowest.
Print all players on the list who are averaging 20 or more point per game and also averaging double figures in rebounds.
Show only the top 10 in scoring (points).
Print out the stat line for all players whose first name is Kyle.
Lab 3
Download the file decl.ind.txt from 10.3.99.206, in the COTC-Blocks/Basic-Linux/Grep-Exercises directory.

Using the grep command and other utilities (i.e. cut, trim, head, etc), perform the following:

Print all lines with a number in them.
egrep '[0-9]' Decl.Ind.txt
awk '/[0-9]/' Decl.Ind.txt
Print the line that contains the famous phrase concerning life, liberty and the pursuit of happiness.
egrep -i 'life|liberty' Decl.Ind.txt
awk '/Life|Liberty/' Decl.Ind.txt
Now, print that line again, but, also include the 2 lines that precede it.
egrep -i -B 2 'life|liberty' Decl.Ind.txt
Print the names of the states. Note that these lines start with a capital letter and have a : after the name.
egrep '^([A-Z][a-z]+ )?[A-Z][a-z]+:$' Decl.Ind.txt
Re-run your previous command, and this time, count the number of lines in the result.
egrep -c '^(([A-Z][a-z]+) )?[A-Z][a-z]+:$' Decl.Ind.txt
Use gawk to print only the records with two fields.
awk 'NF ==2' Decl.Ind.txt
Data
Dec_of_Ind.txt

Lab 4
Download the file student.txt from 10.3.99.206, in the COTC-Blocks/Basic-Linux/Grep-Exercises directory.

Using the awk/sed command and any other useful utilities, perform the following:

Identify the Record and Field Separators and print only fields 1 and 2 of each record.
awk 'BEGIN {RS="----------\n";FS="\n" } {print $1 " " $2}' student.txt
cat student.txt | paste - - - - - - | awk {print$1,$2}
Identify the Record and Field Separators and print only fields 1 and 2 with a new Output Record Separator of 10 asterisks (**********).
awk 'BEGIN {RS="----------\n";FS="\n";ORS="**********\n" } $1 != "" {print $1 " "$2}' student.txt
Identify the Record and Field Separators, print the entire file except records containing 77 or Edwin with a new Output Record Separator of 10 asterisks (**).
awk 'BEGIN {RS="----------";FS="\n";ORS="**********" } /77|Edwin/' student.txt
Identify the Record and Field Separators, print the entire file but substitute 45 with “COMPLETE” and a new Output Record Separator of 10 question marks (??????????).
awk 'BEGIN {RS="----------\n";FS="\n";ORS="??????????\n" } {gsub(/45/,"COMPLETE"); print $0}' student.txt
Data
Jones
2143
78
84
77
----------
Gondrol
2321
56
58
45
----------
RinRao
2122
38
37
65
----------
Edwin
2537
78
67
45
----------
Dayan
2415
30
47
20
----------
Lab 6
Download the file dir_results.txt from 10.3.99.206, in the COTC-Blocks/Basic-Linux/Grep-Exercises directory.
Using the cat/*grep/*awk/sed/sort/etc commands, perform the following:

Display all files where the file size is not equal to zero.
egrep -vw 0 dir_results.txt --> 595015 lines
awk '$5>0' dir_results.txt
Display all files where the file size is equal to zero.
egrep -w 0 dir_results.txt
awk '$5==0' dir_results.txt
List files where the user and group are both root.
awk '$3 ~ /root/ && $4 ~ /root/' dir_results.txt
List just the files, no directories.
awk '!/^d([r-][w-][x-]){3}/' dir_results.txt
List only the filenames (no paths, etc).
awk '!/^d([r-][w-][x-]){3}/ {print $9}' dir_results.txt | egrep -v "\.$|\.\.$"
Sort the filenames in reverse order.
awk '!/^d([r-][w-][x-]){3}/ {print $9}' dir_results.txt | egrep -v "\.$|\.\.$" | sort -rdu
Sort in alphabetical order.
`awk '!/^d([r-][w-][x-]){3}/ {print 9}' dir_results.txt | egrep -v "\.|.." | sort -u"
Sort in alphabetical order, only filenames (no blank lines, no filesnames that are only digits, no filenames that are . or ..).
`awk '!/^d([r-][w-][x-]){3}/ {print 9}' dir_results.txt | egrep -v "\.|.." | egrep -v "[1]+$"
Lab 7
Download the file test_pilfer.txt from 10.3.99.206, in the COTC-Blocks/Basic-Linux/Grep-Exercises directory.
Using the grep and sort commands, perform the following:

Parse the file system pilfer, remove 0 byte files, sort by date, and redirect the output to a file named pilfer_sorted.txt
egrep -v "^$" test_pilfer.txt | tail -n +422 | head -n -107034 | egrep -v "^0" | sort -t'/' -k3 -k2 -k1 > pilfer_sorted.txt
Take non empty file
egrep "^[1-9][0-9]*(\s)+[A-]" test_pilfer.txt | sort -t'/' -k3 -k2 -k1 > pilfer_sorted.txt
Remove system directories that contain just system files, and redirect output to a file named pilfer_sorted2.txt
egrep -v "System32|WINDOWS|Windows|WINNT|Program Data|Program Files|Templates|Local Settings|System Volume|User Account Pictures" pilfer_sorted.txt > pilfer_sorted2.txt
Now look for interesting file extensions that you know may contain data that will allow you to move around the network or may contain information for “intelligence” purposes; redirect the output to a file name pilfer_processed.txt
egrep "sql|xml|doc|xls|csv|pdf|jpg|vsd|bmp|png|conf|ppt|rtf|txt" pilfer_sorted2.txt > pilfer_processes.txt



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#### Mikrotik

System Collaspe/expand logs
system logging action set memory memory-lines=1
system logging action set memory memory-lines=1000
Set hostname
system identity set name=s10-router1

system id se name=gh
Check for neighbors
ip neighbor print detail
Set IP address of interface
interface print detail

ip address add address=172.16.20.1/24 interface=ether2

ip address add address=10.10.0.1/24 interface=hsnet 
Change interface name
interface print detail

in edit ether2 value-name=name 
Create/edit virtual ethernet interface
interface virtual-ethernet add name=tap-s10

ip address add interface=tap-s17 address=172.20.110.1/24
Add users
user add name=user1 password=asdfgh3
>>> group: full

user add name=user1 password=asdfgh3
>>> group: full

user add name=  group=Group3 password=

user add name= group=Group3 password=

user add name= group=Group1 password= 
Add firewall rule(s)
ip firewall filter print

#block ICMP requests to 192.168.22.1
ip firewall filter add action=drop chain=output dst-address=192.168.22.1 protocol=icmp

#block ICMP traffic from AP
ip firewall filter add action=drop chain=input src-address=10.3.110.100 protocol=icmp 

ip firewall filter add action=drop chain=input src-address=192.168.22.0/24 dst-port=8291 protocol=tcp

ip firewall filter add action=log log-prefix="Drop Winbox" chain=input src-address=192.168.22.0/24 dst-port=8291 protocol=tcp

ip firewall filter add action=drop chain=input src-address=10.3.110.100 dst-port=23 protocol=tcp

ip firewall filter add action=log log-prefix="Telnet AP" chain=input src-address=10.3.110.100 dst-port=23 protocol=tcp

#move rules
ip firewall filter move numbers=14,15,16 destination=1

#drop policy
ip firewall filter add action=drop chain=input
View logs
log print

system logging print

system logging disable numbers=

log print follow
Enable/disable services
ip ser pr de

ip service disable telnet
Change password of logged in user
password new-password=asdfgh3
Initialize hotspot
ip hotspot setup
Change password of logged in user
password new-password=asdfgh3
Add static route
ip route add dst-address=172.16.18.0/24 gateway=172.16.20.2
Delete software
system package uninstall kvm


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



iptables
Setup
#check forwarding on firewall
cat /proc/sys/net/ipv4/ip_forward

#stop firewall
systemctl stop firewalld

#tp from ap
tracepath 192.168.22.22

#add route to 
ip r a 172.16.22.0/24 via 10.3.110.193 dev eth1.110
Allow [app] traffic to firewall from AP
#ssh
iptables -A INPUT -s 10.3.110.100 -d 192.168.22.22 -p tcp --dport 22 -j ACCEPT -m comment --comment "ap ssh to FW"

#instructor ssh
iptables -A INPUT -s 10.3.115.200 -d 192.168.22.22 -p tcp --dport 22 -j ACCEPT -m comment --comment "inst. ssh to FW"

#telnet
iptables -A INPUT -s 10.3.110.100 -d 192.168.22.22 -p tcp --dport 23 -j ACCEPT -m comment --comment "ap telnet to FW"

#ftp
iptables -A INPUT -s 10.3.110.100 -d 192.168.22.22 -p tcp --dport 21 -j ACCEPT -m comment --comment "ap ftp to FW"

#tftp
iptables -A INPUT -s 10.3.110.100 -d 192.168.22.22 -p udp --dport 69 -j ACCEPT -m comment --comment "ap tftp to FW"
Forwarding rules
#forward traffic to/from AP and protected host

#ssh
iptables -A FORWARD -p tcp --dport 22 -s 10.3.110.100 -d 172.16.22.22 -j ACCEPT

iptables -A FORWARD -p tcp --sport 22 -d 10.3.110.100 -s 172.16.22.22 -j ACCEPT

#tftp
iptables -A FORWARD -p udp --dport 69 -s 10.3.110.100 -d 172.16.22.22 -j ACCEPT

iptables -A FORWARD -p udp --sport 69 -d 10.3.110.100 -s 172.16.22.22 -j ACCEPT

DNAT / SNAT
#SNAT - direct web traffic from fw to "protected host"
iptables -t nat -I PREROUTING -p tcp --dport 80 -d 192.168.22.22 -j DNAT --to-dest 172.17.5.10

iptables -A FORWARD -p tcp --dport 80 -d 172.17.5.10 -j ACCEPT
iptables -A FORWARD -p tcp --sport 80 -s 172.17.5.10 -j ACCEPT

#DNAT - allow .10 (interal subnet) to telnet out to .240 
iptables -t nat -A POSTROUTING -p tcp --dport 23 -s 172.17.5.10 -d 10.3.110.240 -j SNAT --to 192.168.22.22

iptables -A FORWARD -p tcp --dport 23 -d 10.3.110.240
iptables -A FORWARD -p tcp --sport 23 -s 10.3.110.240

#DNAT - allow 
iptables -t nat -A PREROUTING -p tcp --dport 2500 -d 192.168.22.22 -j DNAT --to-destination 172.17.5.10:23

Loopback
iptables -A INPUT -i lo -j ACCEPT

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




OpenVPN
On Server
ssh administrator@192.168.0.0

sudo -i

#move into easy rsa dir
cd /usr/share/easy-rsa 

#run init pki
./easyrsa init-pki

#run build-ca
./easyrsa build-ca
>>> asdfgh3
>>> asdfgh3
>>> server-ca

#gen server
./easyrsa build-server-full server1 nopass
>>> asdfgh3

#gen client1
./easyrsa build-client-full client1 nopass
>>> asdfgh3

#gen instructor
./easyrsa build-client-full instructor-s10 nopass
>>> asdfgh3

#gen dh
./easyrsa gen-dh

#gen ta
openvpn --genkey --secret ./pki/ta.key

#move everything to openvpn serv dir

cp -pR /usr/share/easy-rsa/pki/{issued,private,ca.crt,dh.pem,ta.key} /etc/openvpn/server/

#enable ipv4 forwarding

vim /etc/sysctl.conf
sysctl -p

#copy server config || run mario.sh

cp /usr/share/doc/openvpn/examples/sample-config-files/server.conf.gz /etc/openvpn/server

#cd to serv dir

cd /etc/openvpn/server

#unzip serv conf

gunzip server.conf.gz

#create a back up

cp server.conf backupserver.conf

#move serv conf up to openvpn dir

mv server.conf ../

cd ..

#################################################################################
							SERVER CONFIG
#################################################################################

vim server.conf

#uncomment local
#add IP address for server, this is the IP that you ssh'd to
>>> local 192.168.30.25

#change port if needed
>>> port 8888

#change protocol if needed
>>> proto udp

#change dev if needed
>>> dev tun

#change file path for keys/certs
>>> ca /etc/openvpn/server/ca.crt
>>> cert /etc/openvpn/server/issued/server1.crt
>>> key /etc/openvpn/server/private/server1.key

#change dh
>>> dh /etc/openvpn/server/dh.pem

#change server IP
>>> server 192.168.110.0 255.255.255.0

#add route
#add subnet of "hidden" network
>>> push "route 172.16.24.0 255.255.255.0"

#add tls key path
>>> tls-auth /etc/openvpn/server/ta.key 

#uncomment compression if needed
>>> comp-lzo

#uncomment user/group
user nobody
group nogroup

#uncomment log-append
#can change log location here if needed
log-append  /var/log/openvpn/openvpn.log

#change log verbosity
verb 6

#################################################################################

#enable on boot
systemctl enable openvpn@server

#start
systemctl start openvpn@server

#################################################################################
							TROUBLESHOOTING
#################################################################################

In a new terminal on the server:
>>> tail -f /var/log/syslog

In another terminal:
>>> systemctl start openvpn@server

Troubleshooting:
>>> systemctl status openvpn@server
>>> netstat -ptuna | grep OVPNPORT #default 1194
>>> cat LOGNAME

#################################################################################
								IPTABLES
#################################################################################

#enable ovpn traffic
#change port
iptables -A INPUT -p udp --dport 5000 -s 10.3.110.100 -j ACCEPT
iptables -A INPUT -p udp --dport 5000 -s 10.3.110.220 -j ACCEPT

#enable ssh 
iptables -A INPUT -p tcp --dport 22 -s 10.3.110.100 -j ACCEPT
iptables -A INPUT -p tcp --dport 22 -s 10.3.110.220 -j ACCEPT

#add forwarding rules
iptables -A FORWARD -i tun+ -o eth1 -j ACCEPT
iptables -A FORWARD -o tun+ -i eth1 -j ACCEPT

#add snat rule
#-s for POSTROUTING rule is the subnet of the ovpn network
iptables -t nat -A POSTROUTING -s 10.100.110.0/24 -o eth1 -j SNAT --to-source 172.16.24.50

#################################################################################
							CLIENT CONFIG
#################################################################################

#copy client file
cp -rp /usr/share/doc/openvpn/examples/sample-config-files/client.conf /etc/openvpn/client1.ovpn

#change dev if needed
>>> dev tun

#change proto if needed
>>> proto udp

#add remote ip
#remote ip is the server ip, port is ovpn listening port
remote 192.168.30.25 8888

#uncomment user/group
user nobody
group nogroup

#comment out ca/cert/keys
#ca ca.crt
#cert client.crt
#key client.key

#comment out tls-auth ta.key
#tls-auth ta.key 1

#add key direction
key-direction 1

#uncomment compression
comp-lzo

echo '<ca>' >> client1.ovpn
cat /etc/openvpn/server/ca.crt >> client1.ovpn
echo '</ca>' >> client1.ovpn

echo '<cert>' >> client1.ovpn
cat /etc/openvpn/server/issued/client1.crt >> client1.ovpn 
echo '</cert>' >> client1.ovpn

echo '<key>' >> client1.ovpn
cat /etc/openvpn/server/private/client1.key >> client1.ovpn 
echo '</key>' >> client1.ovpn 

echo '<tls-auth>' >> client1.ovpn
cat /etc/openvpn/server/ta.key >> client1.ovpn
echo '</tls-auth>' >> client1.ovpn 

#################################################################################

#CHANGE INSTRUCTOR CERT NAMES IF NOT USING INST 
echo '<ca>' >> inst.ovpn
cat /etc/openvpn/server/ca.crt >> inst.ovpn
echo '</ca>' >> inst.ovpn

echo '<cert>' >> inst.ovpn
cat /etc/openvpn/server/issued/inst.crt >> inst.ovpn
echo '</cert>' >> inst.ovpn

echo '<key>' >> inst.ovpn
cat /etc/openvpn/server/private/inst.key >> inst.ovpn
echo '</key>' >> inst.ovpn

echo '<tls-auth>' >> inst.ovpn
cat /etc/openvpn/server/ta.key >> inst.ovpn
echo '</tls-auth>' >> inst.ovpn 

#################################################################################

On Client
scp -rp administrator@192.168.30.25:/etc/openvpn/client1.ovpn .

groupadd nogroup

openvpn --config clien1.ovpn

#if there's no push route in config, add route
ip r a 172.16.24.0/24 dev tun0

On Server
#save iptables

iptables-save >> /etc/iptables/rules.v4.bak
nano /etc/iptables/rules.v4.bak
#change default policy to drop
iptables-apply /etc/iptables/rules-v4.bak

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



2.2 Mikrotik
Standalone Commands
beep
self explanatory; frequency and length is variable

led
check led functionality for a specific period

password
change password of logged in user

ping
send ICMP echo packets

setup
perform basic system setup routine

resolve
perform a DNS lookup

Standalone Scripting Commands
delay error find foreach if local parse put set toarray toid toip6 tostr typeof do execute for global len nothing pick resolve time tobool toip tonum totime while

Top-level Configuration Commands
interface: interface configuration

ip: IP options

system: system management routines

user: user management

General Commands
These commands are common to nearly all menu levels and have similar behavior throughout different menus levels.
add: add new item with values specified by the user
disable: deactivates a parameter
edit: edits values of properties
enable: activates a parameter
print: shows all information accessible from a particular command level
remove: removes specific items from a list
set: allows you to change values of general or item parameters

dns print – View configured DNS servers
dns set – Set DNS servers and allow queries
servers=<IP address> 
allow-remote-requests=no
MikroTik is a caching server if DNS module is present

ip firewall filter print 
show iptables traffic routing rules
ip firewall nat print
show destination and source nat rules
ip firewall mangle print
show packet mods and marking rules
Firewall table
reset-counters-all 
reset all counters in the table
reset-counters 
reset counters for a particular chain or rule
Immutable default policy is ACCEPT
Drop action at end of chain simulates default drop policy

Ip firewall <chain> add – create firewall rules on the router (IPTables)

Notice the similarity with IPTables. The list of match parameters is comprehensive. Do you see any here that are not part of IPTables?	

Input Rules
/ip firewall filter
… add action=accept chain=input disabled=no dst-port=8291 protocol=tcp src-address=192.168.100.0/24
… add action=log chain=input disabled=yes log-prefix=”Log INPUT traffic”
… add action=log chain=input disabled=no protocol=icmp src-address=10.2.10.108

To view firewall counters
ip firewall filter print stats
ip firewall nat print stats

To reset firewall counters
Ip firewall filter reset-counters numbers=

Forward Rules
/ip firewall filter
… add action=accept chain=forward comment=”To webserver” disabled=no protocol=tcp dst-address=20.20.20.100 dst-port=80

… add action=accept chain=forward disabled=no dst-address=20.20.20.0/24

… add action=accept chain=forward comment=”DNS” disabled=no dst-port=53 protocol=udp src-address=20.20.20.100

… add action=accept chain=forward comment=”Internet Users” disabled=no dst-port=80,443 protocol=tcp src-address=20.20.20.100

Nat Rules
(SNAT to mask source traffic)
/ip firewall nat
… add action=src-nat chain=srcnat src-address=19.19.19.0/24 to-address=10.1.1.1 

… add chain=srcnat action=masquerade out-interface=ether2

(DNAT to get traffic back to AP)
/ip firewall nat
… add action=dst-nat chain=dstnat dst-port=883 protocol=tcp to-address=19.19.19.2 to-port=883 comment=by

… add action=dst-nat chain=dstnat dst-port=1007 protocol=tcp to-address=19.19.19.2 to-port=1007 comment=sc

Simulate drop policy
/ip firewall filter
… add action=drop chain=input comment=”drop all” log=no
Added some rules from the last few slides. Here’s what it looks like on the MikroTik.

Hotspot:
Local network address:
Masquerade network:

Address pool:
Select certificate:
SMTP server address:
DNS servers:
DNS name:
Local hotspot user:
User password:
Hotspot interface. No webfig.
Define network and gateway.
Yes/No. If yes, Client packets use routers source address.
Client address pool
None
Default (0.0.0.0)
DNS servers provided to client
FQDN of the hotspot server
Hs-client
coffeetalk

Setting up HOTSPOT
ip hotspot setup
Specify what INTERFACE the hotspot will use
tap1
Keep the current local address network
192.168.50.5/24
Keep `masquerade network: yes`
If yes, Client packets use routers SOURCE ADDRESS
Keep address pool 
192.168.50.1-192.168.50.4,192.168.50.6-192.168.50.254
Replace `import-other-certificate` with: `none`
Keep `smtp server: 0.0.0.0` 
Keep `dns servers:`
Keep `dns name:`
Replace `admin` user` with: `hs-client`
Create the password `coffeetalk`

Ip hotspot active:

Ip hotspot host:

Ip hotspot cookies:

Ip hotspot users:

Ip hotspot profile:

Hotspot active menu shows all AUTHENTICATED users

Host table lists all devices connected to the HotSpot server

Menu contains cookies sent to hotspot clients

Menu to configure user/password information

List of hotspot server profiles. One or more interfaces can be grouped into one server profile.

/ip neighbor print			Lists all discovered neighbors Layer 2                                             broadcast domain

INTERFACE		ADDRESS		MAC-ADDRESS		IDENTITY		VERSION		BOARD
0 ether13			192.168.33.2	00:0C:42:00:38:9F	MikroTik		5.99			RB1100G
1 ether11			1.1.1.4		00:0C:42:40:94:25	test-host		5.8			RB1000
2 Local			10.0.11.203	00:02:B9:3E:AD:E0	c2611-r1					Cisco l…
3 Local			10.0.11.47		00:0C:42:84:25:BA	11.47-750		5.7			RB750
4 Local			10.0.11.254	00:0C:42:70:04:83	tsys-sw1		5.8			RB750G
5 Local			10.0.11.202	00:17:5A:90:66:08	c7200					Cisco l...	

MikroTik routers’ robust routing versatility and functionality rivals that of Cisco routers.
Router supports BGP, OSPF, VRF, MPLS, Multicast, Static and other routing protocols.
/ip route print

/ip service print			Lists MikroTik Router OS services by                                                      protocols and ports
New services can’t be added. It is possible to modifying existing service states and parameters.

/ip service print detail

/system identity print			shows system name: MikroTik
/system identity set name=S15-rtr1

/system package print			Lists installed packages

/system package uninstall			Marks a package for uninstall

/system telnet
This server runs as an IP service

/system reboot
/system shutdown

/user print
/user active print
/user group print
/user aaa print

/user ssh-keys print

Lists configured users and associated groups
List of logged on users (includes hotspot users)
Lists default and custom groups
Defines access/authorization/accounting policies per user
Menu to manage user ssh keys
If key exists, user no longer able to authenticate ssh sessions via password

/user add
Address – Defines source address user can access from
Comment – Short description of the item
Copy-from – item number of a configured user
Disabled – Defines whether item is ignored or used
Group – Group management
Name – user name
Password – user password

/user group
Skin – Webfig utility (policy must be set for write)
comment – Short description of the item
copy-from – item number of a configured user
name – New group name
Group – Group management

Add a user to new group
/user edit

TYPES OF LOGS
INFO
MEMORY
ERROR
MEMORY
WARNING
MEMORY
CRITICAL
Echoes the log to the console while logged in

To view logs
log print
View what’s being logged
system logging print
Enable / Disable logging
system logging disable numbers=<#>

Collapse the logs to only display the most recent log
system logging action set memory memory-lines=1
Revert, to log 1000 lines
system logging action set memory memory-lines=1000

NOTE: On reboot/shutdown, the logs in memory will be wiped
NOTE: Logs can be forwarded to a SYSLOG server to maintain a history
#################################################################################

> interface print
> interface virtual-ethernet add
> ip address add
> 	address: 192.168.50.5
> 	tap1
> 		ip address add address=192.168.50.5/24 interface=tap1
> ip address print
> ip addr edit
> 	number: 0
> 	value-name: address
> 	192.168.150.1/24
> ip arp print
> ip arp add
> 	address=192.168.50.5
> 	interface=tap1
> 	mac-address=AB:CD:EF:12:34:56
> 	use : as separator
> ip arp remove #


> ip firewall filter print stats interval=.5
> ip firewall filter add chain=input protocol=tcp dst-port=22
 src-address=10.3.117.100 action=accept
> ip firewall filter add chain=input protocol=tcp dst-port=80 src-address=10.3.117.100 action=accept
> ip firewall filter print stats interval=.5
> ip firewall filter reset-counters
> ip firewall filter
> 	add action=accept chain=forward comment="To webserver" disabled=no protocol=tcp dst-address=20.20.20.100 dst-port=80
> 	add action=accept chain=forward disabled=no dst-address=20.20.20.0/24
> 	add action=accept chain=forward comment=DNS disabled=no dst-port=53 protocol=udp src-address=20.20.20.100
> 	add action=accept chain=forward comment="Internet Users" disabled=no dst-port=80,443 protocol=tcp src-address=20.20.20.100

# nat
> ip firewall nat

> 	# traffic from 19.19.19.0/24, source address will be changed to 10.1.1.1
>	add action=src-nat chain=srcnat src-address=19.19.19.0/24 to-address=10.1.1.1 

>	add chain=srcnat action=masquerade out-interface=ether2

# (DNAT to get traffic back to AP)
> ip firewall nat

> 	# traffic coming into port 883, forward to 19.19.19.2:883
> 	add action=dst-nat chain=dstnat dst-port=883 protocol=tcp to-address=19.19.19.2 to-port=883 comment=by

> 	add action=dst-nat chain=dstnat dst-port=1007 protocol=tcp to-address=19.19.19.2 to-port=1007 comment=sc

#drop policy

> ip firewall filter add action=drop chain=input comment="drop" log=no log-prefix=""

> ip firewall filter move number=# destination=#

> ip firewall filter remove number=#

> ip hostspot setup
> ip neighbor print detail

H1:
192.168.88.252/24
Gateway: 192.168.88.1/24

H2:
192.168.77.254/24
Gateway: 192.168.77.1/24

MR1:
/ip address add address=192.168.88.1/24 interface=ether1
/ip address add address=10.0.0.1/30 interface=ether2
/ip route add dst-address=192.168.77.0/24 gateway=10.0.0.2


MR2:
/ip address add address=10.0.0.2/30 interface=ether1
/ip address add address=192.168.77.1/24 interface=ether2
/ip route add dst-address=192.168.88.0/24 gateway=10.0.0.1




Lab 1
Task: Write a shell script, using variables that reports the following information in the format below:

Kernel: Linux 3.10.0-1160.49.1.el7.x86_64
Version: #1 SMP Tue Nov 30 15:51:32 UTC 2021
Architecture: x86_64
When complete, save your script as student#.sysinfo.sh and inform an instructor.

#!/bin/bash
_VersionInfo=$(uname -a)
_Kernel=$(echo "$_VersionInfo" | cut -d" " -f 1,3)
_Version=$(echo "$_VersionInfo" | cut -d" " -f 4-11)
_Architecture=$(echo "$_VersionInfo" | cut -d" " -f 12)

echo -e "Kernel: ${_Kernel}\nVersion: ${_Version}\nArchitecture: ${_Architecture}"

Lab 2
Task: Using variables, write a shell script that will:

Prompt the user to enter a file name
Use an IF statement to see if the file exists
If the file does not exist, print an error and exit the script
If the file exists, make a backup copy with the same name as the original file name and append .bak to it
Clear the original file of its contents
Verify that the original file has a file size of zero, if not print an error and exit
Provide the user with feedback
When complete, save your scripts as student#.cleaner.sh and inform an instructor.

#!/bin/bash
read -p "Enter File Name: " _Input
clear

if [[ -e "${_Input}" ]]; then
    # Make a backup
    cp -b "${_Input}" "${_Input}.bak"
else
    # Print error and exit
    echo "File not found" 1>&2
    exit 2 
fi

# Clear original file of contents
cp /dev/null "${_Input}"

# Verify that file has size of zero
if [[ ! "$(stat -c %s ${_Input})" == "0" ]]; then
    echo "File could not be overwritten" 1>&2
    exit 1 
fi
#Provide user with feedback
echo -e "Cleaner completed at $(date)\nFile(s) cleaned: ${_Input}"
Lab 3
Task: Write a shell script that saves user input as variables and does the following:

Prompt the user to specify a directory
Use a command to test if the directory exists
If the file does not exist, notify the user and then create it
If the file does exist, inform the user
Prompt the user to specify a port
Ask if the user needs to add an IPtables rule
If the user wants to add the rule, have the script add the rule using the port provided by the user
If the user does not want to add a rule, remind the user to verify a rule exists that will allow the specified port through (no action needed)
Launch the SimpleHTTPServer module, listening on the specified port and sharing the selected directory
*python -m SimpleHTTPServer or python3 -m http.server
When complete, save your scripts as student#.http.sh and inform an instructor.


#!/bin/bash

# Prompt user for a directory
read -p "Enter the directory to serve files from: " SERVE_DIR

# Check if the directory exists
if [ ! -d "$SERVE_DIR" ]; then
    echo "Directory does not exist. Creating it..."
    mkdir -p "$SERVE_DIR"
    echo "Directory created: $SERVE_DIR"
else
    echo "Directory exists: $SERVE_DIR"
fi

# Prompt for port
read -p "Enter the port number to use: " PORT

# Ask about adding an iptables rule
read -p "Do you want to add an iptables rule for this port? (y/n): " ADD_RULE

if [[ "$ADD_RULE" =~ ^[Yy]$ ]]; then
    echo "Adding iptables rule to allow TCP on port $PORT..."
    iptables -I INPUT -p tcp --dport "$PORT" -j ACCEPT
    echo "Rule added. Reminder: Save iptables config if needed."
else
    echo "Reminder: Make sure a firewall rule exists for TCP port $PORT."
fi

# Launch the HTTP server
echo "Launching Python HTTP server on port $PORT serving directory: $SERVE_DIR"
cd "$SERVE_DIR"

# Try python3 first, fall back to python if needed
if command -v python3 >/dev/null 2>&1; then
    python3 -m http.server "$PORT"
else
    python -m SimpleHTTPServer "$PORT"
fi







Lab 4
Create a script that:

￼Checks the state of the eth1.1xx interface
￼If it is up, inform the operator that it is already up.
￼If it is down, inform the operator that it is down and is being started.
￼Start the eth1.1xx interface.
￼Opens an xterm window, in the lower left quadrant of the display
￼Use custom colors for the background and foreground.
￼Window should display/var/log/messages.
￼Ensure a scroll bar can display 10,000 lines of the log.
￼Check to see if the nfs share has been mounted
￼If it has been mounted, inform the operator.
￼If it has not been mounted, mount the nfs share (10.3.99.206:/nfs-share) to /mnt/nfs.
mkdir /mnt/nfs
mount -t nfs 10.3.99.206:/nfs-share /mnt/nfs
￼Start Firefox in the background.
/usr/local/bin/firefox & disown
-geometry 1045x983+-10+19
￼Name the script “student#_initial.sh”


#!/bin/bash
# student10_initial.sh

INTERFACE="eth1.110"
NFS_SERVER="10.3.99.206:/nfs-share"
MOUNT_POINT="/mnt/nfs"
XTERM_LOG="/var/log/messages"
FIREFOX_PATH="/usr/local/bin/firefox"

echo "[*] Checking interface $INTERFACE..."
if ip link show "$INTERFACE" | grep -q "state UP"; then
    echo "[OK] $INTERFACE is already up."
else
    echo "[INFO] $INTERFACE is down. Bringing it up..."
    ip link set "$INTERFACE" up
fi

echo "[*] Launching xterm to monitor $XTERM_LOG..."
xterm \
    -geometry 104x30+0+500 \
    -bg black -fg green \
    -sb -sl 10000 \
    -T "Log Monitor - $XTERM_LOG" \
    -e "tail -n 100 $XTERM_LOG && exec tail -f $XTERM_LOG" &

echo "[*] Checking NFS mount status..."
if mount | grep -q "$MOUNT_POINT"; then
    echo "[OK] NFS share already mounted at $MOUNT_POINT."
else
    echo "[INFO] Mounting NFS share..."
    mkdir -p "$MOUNT_POINT"
    mount -t nfs "$NFS_SERVER" "$MOUNT_POINT"
    if [ $? -eq 0 ]; then
        echo "[OK] NFS share mounted successfully."
    else
        echo "[ERR] Failed to mount NFS share."
    fi
fi

echo "[*] Starting Firefox..."
$FIREFOX_PATH -geometry 1045x983+-10+19 & disown

echo "[DONE] Initialization script completed."

for loop example 
example 1 
#!/bin/bash

for i in {1..5}; do
  echo "Number: $i"
done

example 2 

#!/bin/bash

for file in /etc/*.conf; do
  echo "Found config file: $file"
done

while loop example 
#!/bin/bash

count=1

while [ $count -le 5 ]; do
  echo "Count is: $count"
  ((count++))
done

example 2 

#!/bin/bash

while IFS= read -r line; do
  echo "Line: $line"
done < myfile.txt

if else fi 

example 1
 #!/bin/bash

FILE="/etc/passwd"

if [ -f "$FILE" ]; then
  echo "File $FILE exists."
else
  echo "File $FILE does not exist."
fi


example 2

#!/bin/bash

read -p "Enter a number: " num

if (( num % 2 == 0 )); then
  echo "$num is even."
else
  echo "$num is odd."
fi

examples of then 

#!/bin/bash

if pgrep sshd > /dev/null; then
  echo "sshd is running."
fi


example 2 

#!/bin/bash

FILE="/usr/bin/bash"

if [ -x "$FILE" ]; then
  echo "$FILE is executable."
fi
